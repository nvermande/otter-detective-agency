// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: interrogation/interrogation.proto

package interrogationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterrogationService_GetWitnessStatement_FullMethodName = "/interrogationpb.InterrogationService/GetWitnessStatement"
	InterrogationService_InterrogateSuspect_FullMethodName  = "/interrogationpb.InterrogationService/InterrogateSuspect"
)

// InterrogationServiceClient is the client API for InterrogationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterrogationServiceClient interface {
	GetWitnessStatement(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessStatement, error)
	InterrogateSuspect(ctx context.Context, in *InterrogationRequest, opts ...grpc.CallOption) (*SuspectResponse, error)
}

type interrogationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterrogationServiceClient(cc grpc.ClientConnInterface) InterrogationServiceClient {
	return &interrogationServiceClient{cc}
}

func (c *interrogationServiceClient) GetWitnessStatement(ctx context.Context, in *WitnessRequest, opts ...grpc.CallOption) (*WitnessStatement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WitnessStatement)
	err := c.cc.Invoke(ctx, InterrogationService_GetWitnessStatement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interrogationServiceClient) InterrogateSuspect(ctx context.Context, in *InterrogationRequest, opts ...grpc.CallOption) (*SuspectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspectResponse)
	err := c.cc.Invoke(ctx, InterrogationService_InterrogateSuspect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterrogationServiceServer is the server API for InterrogationService service.
// All implementations must embed UnimplementedInterrogationServiceServer
// for forward compatibility.
type InterrogationServiceServer interface {
	GetWitnessStatement(context.Context, *WitnessRequest) (*WitnessStatement, error)
	InterrogateSuspect(context.Context, *InterrogationRequest) (*SuspectResponse, error)
	mustEmbedUnimplementedInterrogationServiceServer()
}

// UnimplementedInterrogationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterrogationServiceServer struct{}

func (UnimplementedInterrogationServiceServer) GetWitnessStatement(context.Context, *WitnessRequest) (*WitnessStatement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWitnessStatement not implemented")
}
func (UnimplementedInterrogationServiceServer) InterrogateSuspect(context.Context, *InterrogationRequest) (*SuspectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterrogateSuspect not implemented")
}
func (UnimplementedInterrogationServiceServer) mustEmbedUnimplementedInterrogationServiceServer() {}
func (UnimplementedInterrogationServiceServer) testEmbeddedByValue()                              {}

// UnsafeInterrogationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterrogationServiceServer will
// result in compilation errors.
type UnsafeInterrogationServiceServer interface {
	mustEmbedUnimplementedInterrogationServiceServer()
}

func RegisterInterrogationServiceServer(s grpc.ServiceRegistrar, srv InterrogationServiceServer) {
	// If the following call pancis, it indicates UnimplementedInterrogationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterrogationService_ServiceDesc, srv)
}

func _InterrogationService_GetWitnessStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WitnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterrogationServiceServer).GetWitnessStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterrogationService_GetWitnessStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterrogationServiceServer).GetWitnessStatement(ctx, req.(*WitnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterrogationService_InterrogateSuspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterrogationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterrogationServiceServer).InterrogateSuspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterrogationService_InterrogateSuspect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterrogationServiceServer).InterrogateSuspect(ctx, req.(*InterrogationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterrogationService_ServiceDesc is the grpc.ServiceDesc for InterrogationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterrogationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interrogationpb.InterrogationService",
	HandlerType: (*InterrogationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWitnessStatement",
			Handler:    _InterrogationService_GetWitnessStatement_Handler,
		},
		{
			MethodName: "InterrogateSuspect",
			Handler:    _InterrogationService_InterrogateSuspect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interrogation/interrogation.proto",
}
