// api/proto/database/database.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: database/database.proto

package databasepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseService_CreatePlayer_FullMethodName              = "/databasepb.DatabaseService/CreatePlayer"
	DatabaseService_GetPlayer_FullMethodName                 = "/databasepb.DatabaseService/GetPlayer"
	DatabaseService_UpdatePlayerProgress_FullMethodName      = "/databasepb.DatabaseService/UpdatePlayerProgress"
	DatabaseService_CreateCase_FullMethodName                = "/databasepb.DatabaseService/CreateCase"
	DatabaseService_GetCase_FullMethodName                   = "/databasepb.DatabaseService/GetCase"
	DatabaseService_ListCases_FullMethodName                 = "/databasepb.DatabaseService/ListCases"
	DatabaseService_AssignCaseToPlayer_FullMethodName        = "/databasepb.DatabaseService/AssignCaseToPlayer"
	DatabaseService_GetPlayerCase_FullMethodName             = "/databasepb.DatabaseService/GetPlayerCase"
	DatabaseService_ListEvidence_FullMethodName              = "/databasepb.DatabaseService/ListEvidence"
	DatabaseService_ListSuspects_FullMethodName              = "/databasepb.DatabaseService/ListSuspects"
	DatabaseService_GetInterrogationQuestions_FullMethodName = "/databasepb.DatabaseService/GetInterrogationQuestions"
	DatabaseService_ListLocations_FullMethodName             = "/databasepb.DatabaseService/ListLocations"
	DatabaseService_SolveCase_FullMethodName                 = "/databasepb.DatabaseService/SolveCase"
)

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*Player, error)
	GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*Player, error)
	UpdatePlayerProgress(ctx context.Context, in *UpdatePlayerProgressRequest, opts ...grpc.CallOption) (*Player, error)
	CreateCase(ctx context.Context, in *CreateCaseRequest, opts ...grpc.CallOption) (*Case, error)
	GetCase(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*Case, error)
	ListCases(ctx context.Context, in *ListCasesRequest, opts ...grpc.CallOption) (*CaseList, error)
	AssignCaseToPlayer(ctx context.Context, in *AssignCaseRequest, opts ...grpc.CallOption) (*PlayerCase, error)
	GetPlayerCase(ctx context.Context, in *GetPlayerCaseRequest, opts ...grpc.CallOption) (*PlayerCase, error)
	ListEvidence(ctx context.Context, in *ListEvidenceRequest, opts ...grpc.CallOption) (*EvidenceList, error)
	ListSuspects(ctx context.Context, in *ListSuspectsRequest, opts ...grpc.CallOption) (*SuspectList, error)
	GetInterrogationQuestions(ctx context.Context, in *GetInterrogationQuestionsRequest, opts ...grpc.CallOption) (*InterrogationQuestionList, error)
	ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*LocationList, error)
	SolveCase(ctx context.Context, in *SolveCaseRequest, opts ...grpc.CallOption) (*SolutionResult, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) CreatePlayer(ctx context.Context, in *CreatePlayerRequest, opts ...grpc.CallOption) (*Player, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Player)
	err := c.cc.Invoke(ctx, DatabaseService_CreatePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*Player, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Player)
	err := c.cc.Invoke(ctx, DatabaseService_GetPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdatePlayerProgress(ctx context.Context, in *UpdatePlayerProgressRequest, opts ...grpc.CallOption) (*Player, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Player)
	err := c.cc.Invoke(ctx, DatabaseService_UpdatePlayerProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateCase(ctx context.Context, in *CreateCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Case)
	err := c.cc.Invoke(ctx, DatabaseService_CreateCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCase(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Case)
	err := c.cc.Invoke(ctx, DatabaseService_GetCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListCases(ctx context.Context, in *ListCasesRequest, opts ...grpc.CallOption) (*CaseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaseList)
	err := c.cc.Invoke(ctx, DatabaseService_ListCases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) AssignCaseToPlayer(ctx context.Context, in *AssignCaseRequest, opts ...grpc.CallOption) (*PlayerCase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerCase)
	err := c.cc.Invoke(ctx, DatabaseService_AssignCaseToPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetPlayerCase(ctx context.Context, in *GetPlayerCaseRequest, opts ...grpc.CallOption) (*PlayerCase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerCase)
	err := c.cc.Invoke(ctx, DatabaseService_GetPlayerCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListEvidence(ctx context.Context, in *ListEvidenceRequest, opts ...grpc.CallOption) (*EvidenceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvidenceList)
	err := c.cc.Invoke(ctx, DatabaseService_ListEvidence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListSuspects(ctx context.Context, in *ListSuspectsRequest, opts ...grpc.CallOption) (*SuspectList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuspectList)
	err := c.cc.Invoke(ctx, DatabaseService_ListSuspects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetInterrogationQuestions(ctx context.Context, in *GetInterrogationQuestionsRequest, opts ...grpc.CallOption) (*InterrogationQuestionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterrogationQuestionList)
	err := c.cc.Invoke(ctx, DatabaseService_GetInterrogationQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*LocationList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationList)
	err := c.cc.Invoke(ctx, DatabaseService_ListLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SolveCase(ctx context.Context, in *SolveCaseRequest, opts ...grpc.CallOption) (*SolutionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SolutionResult)
	err := c.cc.Invoke(ctx, DatabaseService_SolveCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility.
type DatabaseServiceServer interface {
	CreatePlayer(context.Context, *CreatePlayerRequest) (*Player, error)
	GetPlayer(context.Context, *GetPlayerRequest) (*Player, error)
	UpdatePlayerProgress(context.Context, *UpdatePlayerProgressRequest) (*Player, error)
	CreateCase(context.Context, *CreateCaseRequest) (*Case, error)
	GetCase(context.Context, *GetCaseRequest) (*Case, error)
	ListCases(context.Context, *ListCasesRequest) (*CaseList, error)
	AssignCaseToPlayer(context.Context, *AssignCaseRequest) (*PlayerCase, error)
	GetPlayerCase(context.Context, *GetPlayerCaseRequest) (*PlayerCase, error)
	ListEvidence(context.Context, *ListEvidenceRequest) (*EvidenceList, error)
	ListSuspects(context.Context, *ListSuspectsRequest) (*SuspectList, error)
	GetInterrogationQuestions(context.Context, *GetInterrogationQuestionsRequest) (*InterrogationQuestionList, error)
	ListLocations(context.Context, *ListLocationsRequest) (*LocationList, error)
	SolveCase(context.Context, *SolveCaseRequest) (*SolutionResult, error)
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseServiceServer struct{}

func (UnimplementedDatabaseServiceServer) CreatePlayer(context.Context, *CreatePlayerRequest) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedDatabaseServiceServer) GetPlayer(context.Context, *GetPlayerRequest) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdatePlayerProgress(context.Context, *UpdatePlayerProgressRequest) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlayerProgress not implemented")
}
func (UnimplementedDatabaseServiceServer) CreateCase(context.Context, *CreateCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCase not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCase(context.Context, *GetCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCase not implemented")
}
func (UnimplementedDatabaseServiceServer) ListCases(context.Context, *ListCasesRequest) (*CaseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCases not implemented")
}
func (UnimplementedDatabaseServiceServer) AssignCaseToPlayer(context.Context, *AssignCaseRequest) (*PlayerCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCaseToPlayer not implemented")
}
func (UnimplementedDatabaseServiceServer) GetPlayerCase(context.Context, *GetPlayerCaseRequest) (*PlayerCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerCase not implemented")
}
func (UnimplementedDatabaseServiceServer) ListEvidence(context.Context, *ListEvidenceRequest) (*EvidenceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvidence not implemented")
}
func (UnimplementedDatabaseServiceServer) ListSuspects(context.Context, *ListSuspectsRequest) (*SuspectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuspects not implemented")
}
func (UnimplementedDatabaseServiceServer) GetInterrogationQuestions(context.Context, *GetInterrogationQuestionsRequest) (*InterrogationQuestionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterrogationQuestions not implemented")
}
func (UnimplementedDatabaseServiceServer) ListLocations(context.Context, *ListLocationsRequest) (*LocationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedDatabaseServiceServer) SolveCase(context.Context, *SolveCaseRequest) (*SolutionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveCase not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}
func (UnimplementedDatabaseServiceServer) testEmbeddedByValue()                         {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s grpc.ServiceRegistrar, srv DatabaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseService_ServiceDesc, srv)
}

func _DatabaseService_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreatePlayer(ctx, req.(*CreatePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetPlayer(ctx, req.(*GetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdatePlayerProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlayerProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdatePlayerProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdatePlayerProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdatePlayerProgress(ctx, req.(*UpdatePlayerProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreateCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateCase(ctx, req.(*CreateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCase(ctx, req.(*GetCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListCases(ctx, req.(*ListCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_AssignCaseToPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).AssignCaseToPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_AssignCaseToPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).AssignCaseToPlayer(ctx, req.(*AssignCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetPlayerCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetPlayerCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetPlayerCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetPlayerCase(ctx, req.(*GetPlayerCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEvidenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListEvidence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListEvidence(ctx, req.(*ListEvidenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListSuspects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuspectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListSuspects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListSuspects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListSuspects(ctx, req.(*ListSuspectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetInterrogationQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterrogationQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetInterrogationQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetInterrogationQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetInterrogationQuestions(ctx, req.(*GetInterrogationQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListLocations(ctx, req.(*ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SolveCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolveCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SolveCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_SolveCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SolveCase(ctx, req.(*SolveCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseService_ServiceDesc is the grpc.ServiceDesc for DatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "databasepb.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlayer",
			Handler:    _DatabaseService_CreatePlayer_Handler,
		},
		{
			MethodName: "GetPlayer",
			Handler:    _DatabaseService_GetPlayer_Handler,
		},
		{
			MethodName: "UpdatePlayerProgress",
			Handler:    _DatabaseService_UpdatePlayerProgress_Handler,
		},
		{
			MethodName: "CreateCase",
			Handler:    _DatabaseService_CreateCase_Handler,
		},
		{
			MethodName: "GetCase",
			Handler:    _DatabaseService_GetCase_Handler,
		},
		{
			MethodName: "ListCases",
			Handler:    _DatabaseService_ListCases_Handler,
		},
		{
			MethodName: "AssignCaseToPlayer",
			Handler:    _DatabaseService_AssignCaseToPlayer_Handler,
		},
		{
			MethodName: "GetPlayerCase",
			Handler:    _DatabaseService_GetPlayerCase_Handler,
		},
		{
			MethodName: "ListEvidence",
			Handler:    _DatabaseService_ListEvidence_Handler,
		},
		{
			MethodName: "ListSuspects",
			Handler:    _DatabaseService_ListSuspects_Handler,
		},
		{
			MethodName: "GetInterrogationQuestions",
			Handler:    _DatabaseService_GetInterrogationQuestions_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _DatabaseService_ListLocations_Handler,
		},
		{
			MethodName: "SolveCase",
			Handler:    _DatabaseService_SolveCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database/database.proto",
}
